<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFootholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canHit = false;

image_speed = 0.3;

myFlag = 0;
grav = 0;
blockCollision = 0;

isSolid = 2;

xDir = -1;
xs = 0.75;
yDir = -1;
ys = 0.1;
init = 1;
startMode = 0;

alarmTurn = 0;
moveTarget = noone;
prevMoveTarget = noone;

respawnRange = -1;
despawnRange = -1;

//@cc 1: normal, 2: shoots bullets from the sides
variation = 1;

//@cc 0: random stuff, 1: guided movement, it will pick the closest objFootholderguide
// with its myFlag and will move towards it
mode = 0;

//@cc speed for mode 1
mySpeed = 1;

//@cc target behavior for mode 1. 0:random if repeated, 1: always pick nearest target
targetMode = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    if (mode == 0)
    {
        xspeed = xs * xDir;
        yspeed = ys * yDir;
    }
    startMode = mode;
    init = 0;
}
dead = false;
event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (mode == 0)
    {
        alarmTurn += 1;
        if (alarmTurn == 120)
        {
            if (variation == 2 &amp;&amp; insideView())
            {
                playSFX(sfxEnemyShootClassic);
                i = instance_create(x, y, objEnemyBullet);
                i.xspeed = -3;
                i.sprite_index = sprMM1MetBullet;
                i = instance_create(x + sprite_width - 4, y, objEnemyBullet);
                i.xspeed = 3;
                i.sprite_index = sprMM1MetBullet;
            }
            
            alarmTurn = 0;
            xspeed *= -1;
            
            if (collision_rectangle(x, y - 48, x + 1, y + 48, objSolid, false, true)
                || (y &lt;= view_yview + 48 &amp;&amp; yspeed &lt; 0)
                || (y &gt;= view_yview + 224 - 48 &amp;&amp; yspeed &gt; 0))
            {
                yspeed = -yspeed;
            }
        }
    }
    else
    {
        if (variation == 2)
        {
            alarmTurn += 1;
            if (alarmTurn == 120)
            {
                if (insideView())
                {
                    playSFX(sfxEnemyShootClassic);
                    i = instance_create(x, y, objEnemyBullet);
                    i.xspeed = -3;
                    i.sprite_index = sprMM1MetBullet;
                    i = instance_create(x + sprite_width - 4, y, objEnemyBullet);
                    i.xspeed = 3;
                    i.sprite_index = sprMM1MetBullet;
                }
                alarmTurn = 0;
            }
        }
        if (moveTarget == noone)
        {
            var total = 0;
            with (objFootholderGuide)
            {
                if (myFlag == other.myFlag)
                    total++;
            }
            with (objFootholderGuide)
            {
                if (myFlag == other.myFlag &amp;&amp; !place_meeting(x, y, other.id))
                {
                    var dist1 = 0, dist2 = 0;
                    if (other.moveTarget != noone)
                    {
                        dist1 = point_distance(x, y, other.x, other.y);
                        dist2 = point_distance(other.moveTarget.x, other.moveTarget.y, other.x, other.y);
                    }
                    if (other.moveTarget == noone || (other.moveTarget != noone &amp;&amp; dist1 &lt; dist2) || (other.targetMode == 0 &amp;&amp; id == other.prevMoveTarget))
                    {
                        if (other.targetMode == 1 || (id != other.prevMoveTarget || total &lt;= 1))
                        {
                            other.moveTarget = id;
                        }
                        else if (id == other.prevMoveTarget)
                        {
                            var randList;
                            var i = 0;
                            with (objFootholderGuide)
                            {
                                if (id != other.id &amp;&amp; myFlag == other.myFlag)
                                {
                                    randList[i] = id;
                                    i++;
                                }
                            }
                            other.moveTarget = randList[max(0, irandom(i - 1))];
                            other.prevMoveTarget = noone;
                            break;
                        }
                    }
                    else if (other.moveTarget != noone &amp;&amp; ((dist1 == dist2)))
                    {
                        other.moveTarget = choose(other.moveTarget, id);
                    }
                }
            }
            if (moveTarget == noone)
            {
                mode = 0;
                alarmTurn = 0;
                xspeed = xs * xDir;
                yspeed = ys * yDir;
                exit;
            }
        }
        else
        {
            if (moveTowardPoint(moveTarget.x, moveTarget.y, mySpeed))
            {
                if (targetMode == 0 &amp;&amp; prevMoveTarget == noone)
                    prevMoveTarget = moveTarget;
                moveTarget = noone;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    alarmTurn = 0;
    xspeed = xs * xDir;
    yspeed = ys * yDir;
}
else
{
    if (insideSection(x, y))
        dead = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
