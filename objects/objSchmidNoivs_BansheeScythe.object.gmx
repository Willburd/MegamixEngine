<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSchmidNoivs_Banshee_ScytheThrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = 0;
grav = 0;

contactDamage = 4;

image_speed = 0.7;

ThrownMode = 0;
HostThrower = noone;
grab_counter = 30;
despawnRange = 4000;

goalPerc = 0;
goalx = x;
goaly = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (global.frozen == false &amp;&amp; global.timeStopped == false)
{
    if(instance_exists(HostThrower) == false) {
        instance_destroy();
        exit;
    }

    //type of flight mode
    switch(ThrownMode) {
        case 0: 
            //circle back to origin
            var radius = point_distance(goalx,goaly,HostThrower.x,HostThrower.y) + (sin(goalPerc*pi)/6);
            var startangle = point_direction(goalx,goaly,HostThrower.x,HostThrower.y);
            
            x = goalx + lengthdir_x(radius,startangle + (goalPerc * 360));
            y = goaly + lengthdir_y(radius,startangle + (goalPerc * 360));
            goalPerc += 0.008;
        break;
        
        case 1: 
            //locked in box to bounce around in, doesn't use tiles, just a rectangle check
            if(point_distance(x + xspeed,0,view_xview[0] + (view_wview[0]/2),0) &gt; 125) xspeed *= -1; 
            if(y + yspeed &lt; view_yview[0]+16) yspeed = 1; 
            if(y + yspeed &gt; view_yview[0]+view_hview[0]-32) yspeed = -1; 
        break;
        
        case 2: 
            //locked in box to bounce around in, doesn't use tiles, just a rectangle check
            despawnRange = 200;
            xspeed *= 1.05;
            yspeed *= 1.05;
        break;
    }
    
    //grabbed by host thrower. end existance
    if(point_distance(x,y,HostThrower.x,HostThrower.y) &lt; 16) &amp;&amp; grab_counter &lt; 0 {
        with HostThrower event_user(1);
        instance_destroy();
    }
    if(grab_counter &lt; 999) grab_counter--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
