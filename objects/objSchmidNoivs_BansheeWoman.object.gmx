<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSchmidNoivs_Banshee_Idle</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprCutMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

blockCollision = false;

introType = 4;
contactDamage = 4;
attackTimer = 0;
grav = 0;
pathSpeed = 3;
pathAccelerator = 0.02;
goalx = xstart;
goaly = ystart;
image_speed = 0.25;
screamingImageSpeed = 0.70;
dirBeforeScream = 0;
prePauseImageSpeed = -1;
dieToPits = false;
initIntro = false;
ScreamPreFlashCount = 0;
ScreamPreFlashMaxi = 18;
ScreamFlashCount = 0;
ScreamFlashMaxi = 15;
pose = sprSchmidNoivs_Banshee_ScytheIdle;
poseImgSpeed = 0.20;
BattlePhase = SchmidNoivs_BansheePhase.DecideScytheGoalPos;
AttackAnimationCounter = 0;
LastThrownWeapon = noone;
orbGapCooldown = 10;
prePauseImageSpeed = -1;

enum SchmidNoivs_BansheePhase {
    AbsorbEnergy,
    DecideScytheGoalPos,
    ScytheReady,
    ScytheThrown,
    AbsorbPrepare
}



// Healthbar colours
healthBarPrimaryColor[1] = 29
healthBarSecondaryColor[1] = 41

// Music
music = "SchmidNoivs_Boss.nsf";
musicType = "VGM";
musicTrackNumber = 0;
musicVolume = 1;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 2);
enemyDamageValue(objBreakDash, 4);

// MaGMML2
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 4);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 3);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objSolarBlaze, 3);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 2);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 3);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 14);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 3);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBrickWeapon, 4);
enemyDamageValue(objIceSlasher, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if(prePauseImageSpeed != -1) {
        image_speed = prePauseImageSpeed;
        prePauseImageSpeed = -1;
    }

    if(sprite_index == sprSchmidNoivs_Banshee_ScreamRings) {
        //scream locker, holds in place and changes itself into a ring of pain 
        xspeed = 0;
        yspeed = 0;
        image_speed = screamingImageSpeed;
        canDamage = true;
        contactDamage = 3;
        mask_index = sprSchmidNoivs_Banshee_ScreamRings;
        if(instance_exists(LastThrownWeapon)) {
            if(LastThrownWeapon.grab_counter &lt; 10) LastThrownWeapon.grab_counter = 10;
        }
        
        if(ScreamFlashCount &lt; ScreamFlashMaxi) {
            //expand
            image_xscale = clamp(image_xscale + 0.075, 0,1);
            image_yscale = clamp(image_yscale + 0.075, 0,1);
            
            if(image_xscale &gt;= 1) ScreamFlashCount++;
        }
        else
        {
            //contract
            image_xscale = clamp(image_xscale - 0.12, 0,1);
            image_yscale = clamp(image_yscale - 0.12, 0,1);
            
            //end check
            if(image_xscale == 0) {
                //return to normal! use the sprite as the flag!
                image_xscale = dirBeforeScream;
                image_yscale = 1;
                image_speed = 0.55;
                ScreamFlashCount = 0;
                sprite_index = sprSchmidNoivs_Banshee_Scream;
            }
        }
    }
    else
    {
        //float towards goal, even in the intro
        if(point_distance(x,y,goalx,goaly) &gt; 5) {
            xspeed = lerp(xspeed, sign(goalx - x) * pathSpeed, pathAccelerator);
            yspeed = lerp(yspeed, sign(goaly - y) * pathSpeed, pathAccelerator);
        }
    
        //fight ai
        if (isFight == true)
        {
            switch(BattlePhase) {
                case SchmidNoivs_BansheePhase.DecideScytheGoalPos:
                    var findtargetx = x;
                    if(instance_exists(target)) findtargetx = target.x;
                    goalx = view_xview[0] + (view_wview[0]/2) + (48 * sign(findtargetx - x));
                    goaly = view_yview[0] + 40;
                    
                    sprite_index = sprSchmidNoivs_Banshee_ScytheIdle;
                    image_speed = 0.20;
                    BattlePhase = SchmidNoivs_BansheePhase.ScytheReady;
                    AttackAnimationCounter = 0; //pre-emptive clean out
                break;   
                
                
                case SchmidNoivs_BansheePhase.ScytheReady:
                    if(view_xview[0] + (view_wview[0]/2) &gt; x) {
                        image_xscale = 1;
                    }
                    else
                    {
                        image_xscale = -1;
                    }    
                    
                    if(point_distance(x,y,goalx,goaly) &lt; 6 || AttackAnimationCounter != 0) {
                        if(AttackAnimationCounter &lt; 10) {
                            AttackAnimationCounter++;
                        }
                        else
                        {
                            if(sprite_index != sprSchmidNoivs_Banshee_ScytheAttack) {
                                //throw!
                                BattlePhase = SchmidNoivs_BansheePhase.ScytheThrown;
                                playSFX(sfxSchmidNoivs_Scythe)
                                sprite_index = sprSchmidNoivs_Banshee_ScytheAttack;
                                image_speed = 0.70;
                                AttackAnimationCounter = 0;
                                image_index = 0;
                            }
                        }
                    }
                break;
                
                case SchmidNoivs_BansheePhase.ScytheThrown:
                    if(sprite_index == sprSchmidNoivs_Banshee_ScytheIdle &amp;&amp; image_index + image_speed &gt;= image_number)
                    {
                        //throw!
                        playSFX(sfxSchmidNoivs_Scythe)
                        sprite_index = sprSchmidNoivs_Banshee_ScytheAttack;
                        image_speed = 0.70;
                        image_index = 0;
                    }
                    else if(sprite_index == sprSchmidNoivs_Banshee_ScytheAttack &amp;&amp; image_index + image_speed &gt;= image_number)
                    {
                        if(instance_exists(target)) {
                            sprite_index = sprSchmidNoivs_Banshee_Idle;
                            image_speed = 0.15;
                            image_index = 0;
                            show_debug_message("Boss threw weapon!");
                            
                            if(AttackAnimationCounter &lt; 3) {
                                with instance_create(x,y-8,objSchmidNoivs_BansheeScythe) {
                                    HostThrower = other.id;
                                    other.LastThrownWeapon = id;
                                    
                                    ThrownMode = other.AttackAnimationCounter;
                                    if(ThrownMode == 0) {
                                        var wobbler = random(1)/3.5;
                                        goalx = lerp(x,target.x,0.40+wobbler);
                                        goaly = lerp(y,target.y,0.38+wobbler);
                                        playSFX(sfxSchmidNoivs_ScytheLong)
                                    }
                                    else if(ThrownMode == 1) {
                                        xspeed = image_xscale*6;
                                        yspeed = 1;
                                        grab_counter = 300;
                                        playSFX(sfxSchmidNoivs_Scythe)
                                    }
                                    else if(ThrownMode == 2) {
                                        var dir = point_direction(x,y,target.x,target.y-8);
                                        xspeed = lengthdir_x(0.8,dir);
                                        yspeed = lengthdir_y(0.8,dir);
                                        grab_counter = 999;
                                        playSFX(sfxSchmidNoivs_Scythe)
                                    }
                                }
                                AttackAnimationCounter++;
                                
                                if(AttackAnimationCounter &gt; 1) {
                                    event_user(2); //new flying position!
                                }
                                
                                if(AttackAnimationCounter &gt; 2) {
                                    AttackAnimationCounter = 0;
                                    BattlePhase = SchmidNoivs_BansheePhase.AbsorbPrepare;
                                    sprite_index = sprSchmidNoivs_Banshee_ChargeIntro;
                                    image_speed = 0.15;
                                    image_index = 0;
                                }
                            }
                        }
                    }
                    else
                    {
                        if(AttackAnimationCounter == 2) {
                            if(sprite_index != sprSchmidNoivs_Banshee_Scream) {
                                if(AttackAnimationCounter &gt; 1 &amp;&amp; point_distance(x,y,goalx,goaly) &lt; 16) {
                                    if(image_index + image_speed &gt;= image_number) {
                                        if(sprite_index == sprSchmidNoivs_Banshee_Idle) {
                                            //float on in~
                                            sprite_index = sprSchmidNoivs_Banshee_ScreamIntro;
                                            image_speed = 0.50;
                                            image_index = 0;
                                        }
                                        else if(sprite_index == sprSchmidNoivs_Banshee_ScreamIntro) {
                                            if(ScreamPreFlashCount &gt; ScreamPreFlashMaxi) {
                                                event_user(0); //call for a SCREAM!
                                            }
                                            ScreamPreFlashCount++;
                                        }
                                    }
                                    
                                    if(instance_exists(LastThrownWeapon)) {
                                        if(LastThrownWeapon.grab_counter &lt; 10) LastThrownWeapon.grab_counter = 10;
                                    }
                                }
                            }
                            else if(image_index + image_speed &gt;= image_number) {
                                sprite_index = sprSchmidNoivs_Banshee_Idle;
                                image_speed = 0.15;
                                image_index = 0;
                                event_user(2); //new flying position!
                            }
                            
                            if(instance_exists(LastThrownWeapon) &amp;&amp; AttackAnimationCounter == 0) {
                                if(LastThrownWeapon.x &gt; x) {
                                    image_xscale = 1;
                                }
                                else
                                {
                                    image_xscale = -1;
                                } 
                            }   
                            else
                            {
                                calibrateDirection();
                            }
                        }
                    } 
                break;
                
                case SchmidNoivs_BansheePhase.AbsorbPrepare:
                    goalx = view_xview[0] + view_wview[0]/2;
                    goaly = view_yview[0] + (view_hview[0]/2) - 16;
                    
                    if(sprite_index != sprSchmidNoivs_Banshee_Charge) {
                        if( point_distance(x,y,goalx,goaly) &lt; 10)
                        {
                            //charge up!
                            sprite_index = sprSchmidNoivs_Banshee_Charge;
                            image_speed = 0.30;
                            image_index = 0;
                        }
                    }
                    else if(image_index + image_speed &gt;= image_number) {
                        BattlePhase = SchmidNoivs_BansheePhase.AbsorbEnergy
                        AttackAnimationCounter = 0;
                    }
                break;
                
                case SchmidNoivs_BansheePhase.AbsorbEnergy:
                    var maxOrbs = 80;
                    if(random(100) &lt; 12 &amp;&amp; orbGapCooldown &lt;= 0 &amp;&amp; AttackAnimationCounter &lt; maxOrbs) {
                        var length = 255;
                        var dir = (AttackAnimationCounter*15) + irandom_range(-10,10);
                        dir *= image_xscale;
                        
                        with instance_create(x + lengthdir_x(length,dir),y + lengthdir_y(length,dir),objSchmidNoivs_BansheeOrbs) {
                            goalx = other.x;
                            goaly = other.y-10;
                        }
                        orbGapCooldown += irandom_range(5,10);
                        AttackAnimationCounter++;
                    }
                    if(orbGapCooldown &gt; 0) {
                        orbGapCooldown -= 1;
                        AttackAnimationCounter += 1;
                    }
                    if(sprite_index != sprSchmidNoivs_Banshee_ScytheIntro) {
                        if(AttackAnimationCounter &gt;= maxOrbs &amp;&amp; instance_number(objSchmidNoivs_BansheeOrbs) &lt;= 0) {
                            if(sprite_index != sprSchmidNoivs_Banshee_ChargeDone) {
                                sprite_index = sprSchmidNoivs_Banshee_ChargeDone;
                                image_speed = 0.30;
                                image_index = 0;
                            }
                            else
                            {
                                if(image_index + image_speed &gt;= image_number) {
                                    sprite_index = sprSchmidNoivs_Banshee_ScytheIntro;
                                    image_speed = 0.30;
                                    image_index = 0;
                                }
                            }    
                        }
                    }
                    else
                    {
                        if(image_index + image_speed &gt;= image_number) {
                            sprite_index = sprSchmidNoivs_Banshee_ScytheIdle;
                            image_speed = 0.15;
                            image_index = 0;
                            BattlePhase = SchmidNoivs_BansheePhase.DecideScytheGoalPos;
                        }
                    }
                    
                break;
            }
        }
    }
}
else
{
    //no clue how they actually do this for the intro so, meh.
    prePauseImageSpeed = image_speed;
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screaming is shielded
if (sprite_index == sprSchmidNoivs_Banshee_ScreamRings)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///backup control for dropping the energy element inside the room and not outside
global.bossTextShown = false;
if (!quickSpawn)
{
    global.aliveBosses = max(0,global.aliveBosses- 1);
}
wasKilled = true;

if (!quickSpawn &amp;&amp; global.aliveBosses &lt;= 0)
{
    if (useEndStageBehavior)
    {
        stopMusic();
        audio_stop_all();
    }
    else
    {
        global.lockTransition = false;
        playMusic(musicStore, musicTypeStore, musicTrackNumberStore, musicLoopStartStore, musicLoopEndStore, musicLoopStore, musicVolumeStore);
    }
}
else if(!quickSpawn)
{   
    if (healthParent==-1)
    {
        var newParent = noone;
        with (prtBoss)
        {
            if (id!=other.id &amp;&amp; !dead &amp;&amp; healthParent == other.id)
            {
                newParent = id;
                healthParent = -1;
                break;
            }
        }
        with (prtBoss)
        {
            if (id != newParent &amp;&amp; id != other.id &amp;&amp; !dead &amp;&amp; healthParent == other.id)
            {
                healthParent = newParent;
            }
        }
    }
}
active = false;

if (doPlayerExplosion)
{
    playSFX(sfxDeath);
    
    // Classic boss explosion
    var i, explosionID;
    for (i = 0; i &lt; 8; i += 1)
    {
        explosionID = instance_create(bboxGetXCenter(), bboxGetYCenter(),
            objMegamanExplosion);
        explosionID.dir = i * 45;
        explosionID.spd = 0.75;
    }
    for (i = 0; i &lt; 8; i += 1)
    {
        explosionID = instance_create(bboxGetXCenter(), bboxGetYCenter(),
            objMegamanExplosion);
        explosionID.dir = i * 45;
        explosionID.spd = 1.5;
    }
}

// HANDLING ITEM DROPS
if (quickSpawn || global.aliveBosses &lt;= 0)
{
    var xx,yy;
    xx = bboxGetXCenter();
    yy = bboxGetYCenter();
    xx = clamp(xx,view_xview[0]+32,view_xview[0]+view_wview[0]-32);
    yy = clamp(yy,view_yview[0]+32,view_xview[0]+view_hview[0]-56);
    
    if (itemDrop == objKey)
    {
        i = instance_create(xx - 8,yy - 8,
            objKey);
        with (i)
        {
            yspeed = -4;
            homingTimer = 90;
            playSFX(sfxKeySpawn);
        }
    }
    else if (itemDrop == objEnergyElement)
    {
        var a = instance_create(xx - 8,yy - 8, objEnergyElement);
        with (a)
        {
            name = other.elementName;
            script = other.elementScript;
            code = other.elementCode;
        }
    }
    else
    {
        // do item drop like a normal enemy (set itemDrop to 0 for normal random drops like enemies too)
        i = instance_create(xx,yy, objExplosion);
        i.alarm[0] = 1;
        i.visible = false;
        i.myItem = itemDrop;
    }
}

if (destroyOnDeath)
{
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Custom intro logic
if(initIntro == false) {
    initIntro = true;
    image_speed = 0.25;
    image_index = 0;
    sprite_index = sprSchmidNoivs_Banshee_Idle;
    y = view_yview[0] - sprite_get_yoffset(sprite_index);
    x = xstart + 4;
    xspeed = -1;
    prePauseImageSpeed = -1;
}


if(point_distance(x,y,goalx,goaly) &lt; 10) {
    xspeed = lerp(xspeed, clamp(xspeed,-0.21,0.21), 0.10);
    yspeed = lerp(yspeed, clamp(yspeed,-0.21,0.21), 0.10);
    
    if(image_index + image_speed &gt;= image_number) {
        //reset image_index and change sprite to next in action!
        if(sprite_index == sprSchmidNoivs_Banshee_Idle) {
            //float on in~
            sprite_index = sprSchmidNoivs_Banshee_ScreamIntro;
            image_speed = 0.50;
            image_index = 0;
        }
        else if(sprite_index == sprSchmidNoivs_Banshee_ScreamIntro) {
            if(ScreamPreFlashCount &gt; ScreamPreFlashMaxi) {
                event_user(0); //call for a SCREAM!
            }
            ScreamPreFlashCount++;
        }
        else if(sprite_index == sprSchmidNoivs_Banshee_Scream) {
            //wait for this sprite, it's basically a return flag, as we only use it at the end of the scream anyway
            sprite_index = sprSchmidNoivs_Banshee_ScytheIntro;
            image_speed = 0.20;
            image_index = 0;
        }
        else if(sprite_index == sprSchmidNoivs_Banshee_ScytheIntro) {
            //zoop scytch
            sprite_index = sprSchmidNoivs_Banshee_ScytheIdle;
            image_speed = 0.10;
            image_index = 0;
            
            startIntro = false; // now start the boss.
            isIntro = true;
        }
    }
}


    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///easy goalpos call
if(instance_exists(target)) {
    var randir = 90 + irandom_range(-45,45);
    var length = irandom_range(60,120);
    if(AttackAnimationCounter == 2) length /= 2;
    
    goalx = target.x + lengthdir_x(length,randir);
    goaly = target.y + lengthdir_y(length,randir);
    
    goalx = clamp(goalx,view_xview[0] + 32,view_xview[0]+view_wview[0] - 32);
    goaly = clamp(goaly,view_yview[0] + 32,view_yview[0]+view_hview[0] - 40);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///regrab projectile
if(BattlePhase == SchmidNoivs_BansheePhase.ScytheThrown) {
    if(sprite_index != sprSchmidNoivs_Banshee_ScytheAttack) {
        //ready for rethrow
        playSFX(sfxSchmidNoivs_Scythe)
        sprite_index = sprSchmidNoivs_Banshee_ScytheIdle;
        image_speed = 0.05;
        image_index = 0;
    }
    
    if(AttackAnimationCounter == 3) {
        event_user(2); //new flying position!
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///begin screaming
sprite_index = sprSchmidNoivs_Banshee_ScreamRings;
image_speed = screamingImageSpeed;
dirBeforeScream = image_xscale;
ScreamPreFlashCount = 0;
image_xscale = 0.04;
image_yscale = 0.04;
image_index = 0;
playSFX(sfxSchmidNoivs_Scream)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if ((iFrames mod 4) &lt; 2 || !iFrames)
        {
            if(sprite_index == sprSchmidNoivs_Banshee_ScreamRings) {
                mask_index = sprSchmidNoivs_Banshee_Scream;
                draw_sprite_ext(sprSchmidNoivs_Banshee_Scream, image_index, x, y, dirBeforeScream, 1, 0, c_white, 1);
            }
            else
            {
                mask_index = sprCutMask;
            }
            
            drawSelf();
        }
        else // Hitspark
        {
            draw_sprite_ext(sprHitspark, 0, spriteGetXCenter(), spriteGetYCenter(), 1, 1, 0, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
