<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSchmidNoivs_Ghasty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 2;

category = "flying";

facePlayerOnSpawn = true;
grav = 0;
blockCollision = 0;
despawnRange = 40;

// Enemy specific code
contactStart = contactDamage;
image_speed = 0;
charging = false;
waver = 0;
homex = x;
homey = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(instance_exists(target)) {
        if(point_distance(x,y,target.x,target.y) &gt; 64 &amp;&amp; charging == false) {
            //fly to
            waver += 0.04;
            
            var maindirection = point_direction(homex,homey,target.x,target.y);
            
            var goalx = homex + lengthdir_x(waver*9,maindirection) + lengthdir_x(sin(waver)*20,maindirection+90);
            var goaly = homey + lengthdir_y(waver*9,maindirection) + lengthdir_y(sin(waver)*20,maindirection+90);
            
            x = lerp(x, goalx, 0.10);
            y = lerp(y, goaly, 0.10);
            
            image_index = (image_index + 0.10) % 3;
            calibrateDirection();
        }
        else if(charging == false) 
        {
            //start charge
            var maindirection = point_direction(x,y,target.x,target.y);
            homex = x + lengthdir_x(-2,maindirection);
            homey = y + lengthdir_y(-2,maindirection);
            charging = true;
            waver = 0;
            calibrateDirection();
        }
        else
        {
            if(point_distance(x,y,target.x,target.y) &gt; 72 &amp;&amp; waver &gt; 60) {
                //slow down!
                image_index -= 3;
                image_index = (image_index + 0.10) % 3;
                image_index += 3;
                
                speed = lerp(speed, 0, 0.40);
                if(speed &lt; 1)
                {
                    waver = 0;
                    speed = 0;
                    charging = false;
                    homex = x;
                    homey = y;
                }
            }
            else
            {
                //charging
                waver += 1;
                if(waver &gt; 20) {
                    //charge!
                    image_index -= 3;
                    image_index = (image_index + 0.20) % 3;
                    image_index += 3;
                
                    var maindirection = point_direction(homex,homey,x,y);
                    hspeed = lerp(hspeed, lengthdir_x(5,maindirection), 0.08);
                    vspeed = lerp(vspeed, lengthdir_y(5,maindirection), 0.08);
                }
                else
                {
                    //pre charge
                    image_index -= 3;
                    image_index = (image_index + 0.30) % 3;
                    image_index += 3;
                }
            }
        }
    }
}
else if (dead)
{
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
